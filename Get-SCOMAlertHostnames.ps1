<#####
.Description 
This script should be setup using a command channel in SCOM, it will work to scan the alert for a principal name, 
or look for one based on a regex match for a known FQDN. If the alert does not have a principal name and we can 
find one, the script will then write the matched FQDN to "CustomField1" of the alert. 

.Example
Example Command Channel Config:
    Full path of the command file: 
        c:\windows\system32\windowspowershell\v1.0\powershell.exe
    Command line parameters: 
        C:\path\to\script.ps1 -alertID '$Data/Context/DataItem/AlertId$'
        or
        C:\path\to\script.ps1 '$Data/Context/DataItem/AlertId$'
    Startup folder: 
        c:\windows\system32\windowspowershell\v1.0\

.PARAMETER alertID
This is the ID generated by SCOM that coincides to the alert we want to process

.PARAMETER matchCriteria
This is a RegEx statment that helps define what the FQDN should look like and what we're looking for the in the alert XML

.NOTES
This script provided without warranty or support.

#####>

param (
    [string]$alertID
   ,[regex]$matchCriteria = "[-_\w]+\.\w*\.\w*\.domain.com" ## This is defining what we're looking for as far as the client FQDN goes
   ,$noPrincipalNameCount = 0 ## Do not change
   ,$logContent = @() ## Do not Change
)


## Start Transcription Logging
if (-not(Test-Path "C:\Temp\Logs")){ New-Item -ItemType Directory "C:\Temp\Logs" > $null}
Start-Transcript -IncludeInvocationHeader -OutputDirectory "C:\Temp\Logs"


## We'll automatically continue even if errors occur
$ErrorActionPreference = [System.Management.Automation.ActionPreference]::Continue

## Set the path to where our logs need to live
$logFilePath = "$($PSScriptRoot)\SCOM_AlertUpdatingScript.log"

## Get Alert details for processing
$alert = Get-SCOMAlert -Id $alertID

$logContent+= "`n[$(Get-Date)]:: Enumerating info for SCOM Alert ID: $($alert.ID); Name: $($alert.Name)"

if ($alert.PrincipalName -eq $null) { ## If PrincipalName is null...
    
    [int]$i = $null
    $clientName = ''

    $possiblePlacestheClientNameCouldBe = @(
        [PSCustomObject]@{Contents = $alert.MonitoringObjectDisplayName; ParamName = "MonitoringObjectDisplayName"}
        [PSCustomObject]@{Contents = $alert.MonitoringObjectFullName   ; ParamName = "MonitoringObjectFullName"   }
        [PSCustomObject]@{Contents = $alert.MonitoringObjectName       ; ParamName = "MonitoringObjectName"       }
        [PSCustomObject]@{Contents = $alert.MonitoringObjectPath       ; ParamName = "MonitoringObjectPath"       }
        [PSCustomObject]@{Contents = $alert.NetbiosComputerName        ; ParamName = "NetbiosComputerName"        }
        [PSCustomObject]@{Contents = $alert.Parameters                 ; ParamName = "Parameters"                 }
        [PSCustomObject]@{Contents = $alert.Context                    ; ParamName = "Context"                    }
       )
 
    foreach ($place in $possiblePlacestheClientNameCouldBe) {
        $i++
        if ($place -match $matchCriteria) {
            $clientName = $matches[0]
            $noPrincipalNameCount++
            echo "Client name found in '$($place.ParamName)' as '$($clientName)'"
            $logContent+= "[$(Get-Date)]:: Client name found in the property '$($place.ParamName)' as '$($clientName)'."
            break ## Break the loop when we get a match
        }
    }

    Add-Content -Path $content -Value "1"

    If ($clientName -eq ''){
        $logContent+= "[$(Get-Date)]:: Client name was not found in the alert details. We will not update the ticket."
        
        try {
            $alert | Set-SCOMAlert -CustomField1 $clientName
        }
        catch{
            Get-SCOMAlert -Id $alert.ID | Set-SCOMAlert
        }
        
        EXIT ## Terminate the script as there's nothing else to do
    }
    else {
        $logContent+= "[$(Get-Date)]:: Setting CustomField1 to value: $($clientName)"

        ## Update the alert with the client name
        try {
            $alert | Set-SCOMAlert -CustomField1 $clientName
        }
        catch{
            Get-SCOMAlert -Id $alert.ID | Set-SCOMAlert -CustomField1 $clientName
        }
    }

                                                                             
}
else { ## If PrincipalName is NOT null...
    
    ## Log our luck
    $logContent+= "[$(Get-Date)]:: PrincipalName is present: $($alert.PrincipalName)"

    ## Set alert resolution state so that the connector will pick it up
    ## Update the alert with the client name
    try {
        $alert | Set-SCOMAlert -CustomField1 $alert.PrincipalName
    }
    catch{
        Get-SCOMAlert -Id $alert.ID | Set-SCOMAlert -CustomField1 $alert.PrincipalName
    }
}

Add-Content -Path $logFilePath -Value $logContent

# ~fin

$logContent ##for the transcript
Stop-Transcript
